
CREATE (t:Time {time: 't_time', u: '{t_u}', c: '{t_c}', e: '{t_e}', i: '{t_i}', O: '{t_O}', SERVER_REQUEST_TIME_FLOAT: '{t_SERVER_REQUEST_TIME_FLOAT}', SERVER_REQUEST_TIME: '{t_SERVER_REQUEST_TIME_FLOAT}'}),
(tdy:TimeDayYear {z: '{tdy_z}'}),
(ty:TimeYear {Y: '{ty_Y}'}),
(tmon:TimeMonth {m: '{tmon_m}'}),
(tdm:TimeDayMonth {d: '{tdm_d}'}),
(th:TimeDayHour {H: '{th_H}'}),
(tmin:TimeMinute {i: '{tmin_i}'}),
(ts:TimeSecond {s: '{ts_i}'}),
(tdy)-[:DATE]->(t),
(ty)-[:DATE]->(t),
(tmon)-[:DATE]->(t),
(tdm)-[:DATE]->(t),
(th)-[:DATE]->(t),
(tmin)-[:DATE]->(t),
(ts)-[:DATE]->(t)

CREATE (evt:Event),
(code:Code {major: '{code_major}', minor: '{code_minor}', level: '{code_level}'}),
(req:Request {SERVER_SCRIPT_NAME: '{req_SERVER_SCRIPT_NAME}'; SERVER_REQUEST_URI: '{req_SERVER_REQUEST_URI}', SERVER_QUERY_STRING: '{req_SERVER_QUERY_STRING}', 
SERVER_REQUEST_METHOD: '{req_SERVER_REQUEST_METHOD}', SERVER_SERVER_PROTOCOL: '{req_SERVER_SERVER_PROTOCOL}', SERVER_GATEWAY_INTERFACE: '{req_SERVER_GATEWAY_INTERFACE}', 
SERVER_REQUEST_SCHEME: '{req_SERVER_REQUEST_SCHEME}', SERVER_SCRIPT_FILENAME: '{req_SERVER_SCRIPT_FILENAME}', SERVER_SERVER_PORT: '{req_SERVER_SERVER_PORT}', 
SERVER_SERVER_ADDR: '{req_SERVER_SERVER_ADDR}', SERVER_HTTP_ACCEPT_ENCODING: '{req_SERVER_HTTP_ACCEPT_ENCODING}', 
SERVER_HTTP_UPGRADE_INSECURE_REQUESTS: '{req_SERVER_HTTP_UPGRADE_INSECURE_REQUESTS}', SERVER_HTTP_ACCEPT: '{req_SERVER_HTTP_ACCEPT}', SERVER_HTTP_CONNECTION: '{req_SERVER_HTTP_CONNECTION}', 
SERVER_HTTP_HOST: '{req_SERVER_HTTP_HOST}', SERVER_FCGI_ROLE: '{req_SERVER_FCGI_ROLE}', SERVER_PHP_SELF: '{req_SERVER_PHP_SELF}', REQUEST_JSON: '{req_REQUEST_JSON}'}),
(t)-[:DATE]->(evt),
(code)-[:CATEGORIZE]->(evt),
(req)-[:GENERATE]>(evt)

CREATE (tr:Trace),
(bt:BackTrace),
(i:Instance {name: '{i_name}'}),
(c:Class {name: '{c_name}'}),
(m:Method {name: '{m_name}'}),
(l:Line {number: '{l_name}'}),
(var:Var {json: '{r_json}'}),
(t)-[:TRACE]->(req),
(tr)-[:TRACE]->(i),
(tr)-[:TRACE]->(c),
(tr)-[:TRACE]->(m),
(tr)-[:TRACE]->(l),
(tr)-[:TRACE]->(var),
(bt)-[:HISTORIZE]->(trace)

CREATE (app:Application {name: '{app_name}'}),
CREATE (hApp:HostApp {json: '{hApp_json}', SERVER_PATH: '{hApp_SERVER_PATH}', SERVER_SYSTEMROOT: '{hApp_SERVER_SYSTEMROOT}', SERVER_COMSPEC: '{hApp_SERVER_COMSPEC}', 
SERVER_PATHEXT: '{hApp_SERVER_PATHEXT}', SERVER_WINDIR: '{hApp_SERVER_WINDIR}', SERVER_SYSTEMDRIVE: '{hApp_SERVER_SYSTEMDRIVE}', SERVER_TEMP: '{hApp_SERVER_TEMP}', SERVER_TMP: '{hApp_SERVER_TMP}', 
SERVER_QT_PLUGIN_PATH: '{hApp_SERVER_QT_PLUGIN_PATH}', SERVER_PHPRC: '{hApp_SERVER_PHPRC}', SERVER_PHP_FCGI_MAX_REQUESTS: '{hApp_SERVER_PHP_FCGI_MAX_REQUESTS}', 
SERVER__FCGI_SHUTDOWN_EVENT_: '{hApp_SERVER__FCGI_SHUTDOWN_EVENT_}', SERVER_DOCUMENT_ROOT: '{hApp_SERVER_DOCUMENT_ROOT}', SERVER_SERVER_NAME: '{hApp_SERVER_SERVER_NAME}', 
SERVER_CONTEXT_PREFIX: '{hApp_SERVER_CONTEXT_PREFIX}', SERVER_SERVER_SOFTWARE: '{hApp_SERVER_SERVER_SOFTWARE}', SERVER_SERVER_SIGNATURE: '{hApp_SERVER_SERVER_SIGNATURE}', 
SERVER_CONTEXT_DOCUMENT_ROOT: '{hApp_SERVER_CONTEXT_DOCUMENT_ROOT}', SERVER_SystemRoot: '{hApp_SERVER_SystemRoot}'}),
(env:Evironnement {name: '{env_name}', SERVER_SERVER_ADMIN: '{env_SERVER_SERVER_ADMIN}'}),
(cfApp:ConfApp {json: '{cfApp_json}'}),
(t)-[:TRACE]->(app),
(cfApp)-[:CONFIGURE]->(app),
(env)-[:SPONSORIZE]->(hApp),
(hApp)-[:HOST]->(app)

CREATE (u:User {securityLevel: '{u_securityLevel}', sessionEnd: '{u_sessionEnd}', sessionStart: '{u_sessionStart}', idCryptedT: '{u_idCryptedT}', sessionIdCryptedT: '{u_sessionIdCryptedT}', 
idCryptedS: '{u_idCryptedS}', sessionIdCryptedS: '{u_sessionIdCryptedS}', id: '{u_id}', sessionId: '{u_sessionId}'})
(uh:UserHistory),
(hClient:HostClient {json: '{hClient_json}', SERVER_REMOTE_PORT: '{hClient_SERVER_REMOTE_PORT}', SERVER_REMOTE_ADDR: '{hClient_SERVER_REMOTE_ADDR}', 
SERVER_HTTP_USER_AGENT: '{hClient_SERVER_HTTP_USER_AGENT}'}),
(env:Evironnement {name: '{env_name}', SERVER_SERVER_ADMIN: '{env_SERVER_SERVER_ADMIN}'}),
(ss:Session {startTime: '{ss_startTime}', userId: '{ss_userId}', sessionId:'{ss_sessionId}', appId: '{ss_appId}', sessionIdCrypted: '{ss_sessionIdCrypted}', SERVER_HTTP_COOKIE: '{ss_SERVER_HTTP_COOKIE}', 
SESSION_JSON: '{ss_SESSION_JSON}'}),
(ssClient:SessionClient {startTime: '{ssClient_startTime}', userIdCrypted: '{ssClient_userIdCrypted}'}),
(ssApp:SessionApp {startTime: '{ssApp_startTime}', appIdCrypted: '{ssApp_appIdCrypted}', ttl: '{ssApp_ttl}'}),
(cfClient:ConfClient {json: '{cfClient_json}'}),
(mock:Mock {userId: '{mock_userId}', appName: '{mock_appName}', mockName: '{mock_mockName}'}),
(u)-[:CALL]->(req),
(ss)-[:MAINTAIN]->(ssClient),
(ss)-[:MAINTAIN]->(ssApp),
(ssClient)-[:AUTORIZE]->(u),
(ssApp)-[:ACCESS]->(app),
(mock)-[:MOCK]->(u),
(uh)-[:HISTORIZE]->(ss)
