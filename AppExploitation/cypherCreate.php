<?php

$libDir = '../lib/';
$libExt = '.php';

require_once $libDir.'merge'.$libExt;
require_once $libDir.'conf'.$libExt;
require_once $libDir.'score'.$libExt;
require_once $libDir.'template'.$libExt;

/*
    public $deleteAllCypherConfTemplateContent                            = '';
    public $createNodeWithAutoIncrementCypherConfTemplateContent          = '';
    public $labelsWithAutoIncrementCypherConfTemplateContent              = '';

    public $attributListHtmlTemplateContent                               = '';
    public $postitHtmlTemplateContent                                     = '';
    public $postitLisHtmlTemplateContent                             = '';

  "attributNameTag": "{attributName}",
  "attributValueTag": "{attributValue}",
  "listNameTag": "{listName}",
  "attributListHTMLTag": "{attributListHTML}",
  "nodeNameTag": "{nodeName}",
  "labelNameTag": "{labelName}",
  "labelParamCypherCode": "{labelParamCypherCode}",

*/

class attribut {

	use TDesignCore;
	use Ttemplate;
	
	private $k;
	private $v;
	private $def;
	private $labelName   = '';
	private $elementName = '';
	
	public function __construct($labelName, $elementName, $name, $value, $def = ''){

		$this->labelName                = $labelName;
		$this->elementName              = $elementName;
		$this->k   						= $name;
		$this->v   						= $value;
		$this->def 						= $def;		
		$this->templateDefaultList['k'] = $this->k;
		$this->templateDefaultList['v'] = $this->def;
		$this->templateValList['k']     = $this->k;
		$this->templateValList['v']     = $this->v;
	}
}

class attributList {

	use TDesignCore;
	use TMerge;
	use TTemplate;
	
	public function __construct($labelName, $elementName, $attributListDefault, $attributList = array()){
		
		$this->labelName   = $labelName;
		$this->elementName = $elementName;
		$attributList      = self::mergeObj(Conf::$export[$attributListDefault], $attributList);
		
		foreach($attributList as $attributName => $attributValue){
			
			$attribut = new attribut($labelName, $elementName, $attributName, $attributValue);
			
			if($attribut === false) return false;
			
			$result = $attribut->templateCypher();

			if($result === false) return false;
			
			$result = $attribut->templateHtml();
			
			if($result === false) return false;
			
			$this->attributList[$attributName] = $attribut;
		}		
		$result = $this->templateRender();
			
		if($result === false) return false;
		
		$result = $this->templateCypher();
			
		if($result === false) return false;
	}
}

class Element {

	use TDesignCore;
	use TTemplate;
	
	public $score        = 0;
	
	private $elementName = '';
	private $labelName   = '';
	private $type        = '';
	private $attributList;
	
	public function __construct($labelName, $elementName, $type, $list, $attributListDefault, $attributList){
	
		$this->labelName   = $labelName;
		$this->elementName = $elementName;
		$this->type        = $type;
		$this->score       = $this->scoreGet($type, $list);
		
		if($this->score === false) return false;
		
		$this->attributList = new attributList($labelName, $elementName, $attributListDefault, $attributList);
		
		if($this->attributList === false) return false;
	}
	
	private function scoreGet($type, $list, $scoreFuncSuffix = 'ScoreGet'){
	
		$scoreGetFunc = $type.$scoreFuncSuffix;
		
		return Score::$scoreGetFunc($list);
	}
}

class ElementList {

	use TDesignCore;
	use TTemplate;
	
	private $list = array();
	
	private function __construct($type, $attributListDefault){
		
		$listVar = $type.'List';
		$list    = Conf::$export[$listVar];
	
		foreach($list as $labelName => $elementList){
			
			foreach($elementList as $elementName => $attributList){
				
				$postIt = new Element($labelName, $elementName, $type, $this->list, $attributListDefault, $attributList);
				
				if($postIt === false) return false;
				
				$this->list[$postIt->score] = $postIt;
			}			
		}
	}
	
	public function actionPostitListCreate($type = 'action', $attributListDefault = 'relationshipParamList'){
		
		return new ElementList($type, $attributListDefault);
	}
}

function actionListTemplateHtml($conf, $type = 'action', $paramVar = 'relationshipParamList'){

	$list         = array();
	$listVar      = $type.'List';
	$scoreGetFunc = $type.'ScoreGet';
	$postitList   = array();
	
	foreach($conf->$listVar as $confItemName => $confItem) {
		
		$param                          = $conf->$paramVar;
		$confItem                       = mergeObj($param, $confItem);		
		$tagValList						= array();
		$tagValList['nodeName']         = $confItemName;
		$tagValList['labelName']        = $type;		
		$tagValList['listName']         = $type;		
		$tagValList['attributListHtml'] = attributListHtml($confItem);		
		$score                          = self::$scoreGetFunc($list);
		$postitList[$score]             = Template::template($conf->postitHtmlTemplateContent, $conf->tagList, $tagValList);
	}
	sort($postitList);
	$postitListHtml 		     = implode('', $postitList);	
	$tagValList				     = array(); 
	$tagValList['positListHtml'] = $postitListHtml;	
    $tagValList['labelName']     = $type;		
	$tagValList['listName']      = $type;
    $postitListHtml              = Template::template($conf->postitHtmlTemplateContent, $conf->tagList, $tagValList);
	
	return $postitListHtml;
}

function emotionListTemplate($conf, $type = 'emotion', $paramVar = 'relationshipParamList'){

	$list         = array();
	$listVar      = $type.'List';
	$scoreGetFunc = $type.'ScoreGet';
	
	foreach($conf->$listVar as $confItemName => $confItem) {
	
		$param      = $conf->$paramVar;
		$param      = mergeObj($param, $confItem);
		$score      = self::$scoreGetFunc($list);
		$postItHtml = Template::template($conf->postitHtmlTemplateContent, $conf->tagList, $tagValList);
	
	/*
		 "anger": {
		 "negative": true,
		 "forceful": true
		 },
		 */
	}
}

function labelListTemplate($conf, $type = 'label', $paramVar = 'labelParamList'){

	$list         = array();
	$listVar      = $type.'List';
	$scoreGetFunc = $type.'ScoreGet';
	
	foreach($conf->$listVar as $confItemName => $confItem) {
		
		$param      = $conf->$paramVar;
		$param      = mergeObj($param, $confItem);		
		$score      = self::$scoreGetFunc($list);
		$postItHtml = Template::template($conf->postitHtmlTemplateContent, $conf->tagList, $tagValList);

		/*
		 "Compagny": {
		 "DianeKruger": {
		 "compagnyName": "DianeKruger"
		 },
		 "Instriit": {
		 "compagnyName": "Instriit"
		 }
		 },
		*/
	}
}

$conf = new Conf();

/*

$navigationTemplateFile     = $confObj->htmlResultDir.$confObj->navigationTemplateFileBasename;
$nodeTemplateFile           = $confObj->cypherResultDir.$confObj->nodeTemplateFileBasename;

$cypherCode = $conf->deleteAllCypherConfTemplateContent;


foreach($jsonObj as $list => $jsonObj1) {
		
	foreach($jsonObj1 as $name => $attributList) {
		
		if(is_array($listHtlmElement[$list]) === false) $listHtlmElement[$list] = array();
		
		$listId = count($listHtlmElement[$list]);
		$listName = $list.'-'.$name;
		
		$attributListHTML = '';
		
		foreach($attributList as $k => $v){
			$attributListTitle .= $k.': '.$v."\n";
			$attributListHTML .= $attributListHTMLTemplate;
			$attributListHTML = str_replace($attributName, $k, $attributListHTML);
			$attributListHTML = str_replace($attributValue, $v, $attributListHTML);
		}
		$listHtlmElement[$list][$listId] = $htlmElementHtmlTemplate;
		$listHtlmElement[$list][$listId] = str_replace($listNameTag, $listName, $htlmElementHtmlTemplate);
		$listHtlmElement[$list][$listId] = str_replace($attributListTitleTag, $attributListTitle, $htlmElementHtmlTemplate);
		$listHtlmElement[$list][$listId] = str_replace($attributListHTMLTag, $attributListHTML, $htlmElementHtmlTemplate);
		$listHtlmElement[$list][$listId] = str_replace($nodeNameTag, $name, $htlmElementHtmlTemplate);
		
		$cypherCode .= "\n".$cypherCodeCreateNodeWithAutoIncrementTemplate;
		$cypherCode = str_replace($odeNameTag, ucfirst($name), $cypherCode);
		
		if($list === 'labelList') {

			$labelParamCypherCode = '';
			
			foreach($attributList as $k => $v){
				
				foreach($jsonObj->labelParam as $kP => $vP){
					
					if(isset($v->$kP) === false) $v->$kP = $vP;
				}
				foreach($v as $kP2 => $vP2){
					
					$labelParamCypherCode .= ' '.$kP2.': '.$vP2.' ';
				}
				$labelParamCypherCode = '{ '.$labelParamCypherCode.' }';
								
				$cypherCode .= "\n".$cypherCodeLabelsWithAutoIncrementTemplate;
				$cypherCode = str_replace('{nodeName}', ucfirst($name), $cypherCode);
				$cypherCode = str_replace('{labelName}', strtolower($k), $cypherCode);
				$cypherCode = str_replace('{labelParamCypherCode}', $labelParamCypherCode, $cypherCode);
			}
		}
	}
	$listHtlmElement[$list] = $listHtlmElementHtmlTemplate;
	$listHtlmElement[$list] = str_replace('{listName}', $list, $listHtlmElementHtmlTemplate);
	$listHtlmElement[$list] = str_replace('{listHtlmElement}', implode('', $listHtlmElement[$list]), $listHtlmElementHtmlTemplate);

	sort($listHtlmElement[$list]);
	$htlmElementList[$list] = implode("\n", $listHtlmElement[$list]);
}

file_put_contents($navigationTemplateFile, implode("\n", $htlmElementList));
file_put_contents($nodeTemplateFile, $cypherCode);

*/

?>