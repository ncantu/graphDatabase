<?php

require_once '../lib/_require.php';

class TraceView {
	
	use TRequest;
	
	public $html;
	
	public function __construct() {
		
		date_default_timezone_set(Conf::TIMEZONE_DEFAULT);
				
		$appNameSelected = $this->filterExist('appNameFilter');
		$mockSelected    = $this->filterExist('mockFilter');
		$yearSelected    = $this->filterExist('yearFilter', date('Y', time()));
		$monthSelected   = $this->filterExist('monthFilter', date('m', time()));
		$daySelected     = $this->filterExist('dayFilter', date('d', time()));
		$hourSelected    = $this->filterExist('hourFilter', date('H', time()));
		$userIdSelected  = $this->filterExist('userIdFilter');
		$mockList        = $this->mockList($mockSelected);
		$appList         = $this->appList($appNameSelected);
		$fileList        = $this->fileListHtmlGet();
		$content         = $this->fileContentHtmlGet();
		$this->html      = '<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Log View</title>
</head>
<body>
  <h1>Log view</h1>
  <form method="POST">
	<fieldset><legend>Step 1 : filters</legend>
	  <label for="appNameFilter">Application</label><select id="appNameFilter" name="appNameFilter">
		'.$appList.'
	  </select>
	  <label for="mockFilter">Mock</label><select id="mockFilter" name="mockFilter">
		'.$mockList.'
	  </select>
	  <label for="userIdFilter">UserId</label><input id="userIdFilter" name="userIdFilter" type="text" value="'.$userIdSelected.'">
	  <h2>Date ('.Conf::TIMEZONE_DEFAULT.' Now d/m/Y H:i:s = '.date('d/m/Y H:i:s', time()).')</h2>
	  <label for="yearFilter">Year</label><input min="2015" max="2016" id="yearFilter" name="yearFilter" type="number" value="'.$yearSelected.'">
	  <label for="monthFilter">Month</label><input min="1" max="12" id="monthFilter" name="monthFilter" type="number" value="'.$monthSelected.'">
	  <label for="dayFilter">Day</label><input  min="1" max="31"id="dayFilter" name="dayFilter" type="number" value="'.$daySelected.'">
	  <label for="hourFilter">Hour</label><input  min="1" max="24"id="hourFilter" name="hourFilter" type="number" value="'.$hourSelected.'">
      <input type="submit">
	</fieldset>
  </form>
  <form method="POST">
	 <fieldset><legend>Step 2 : Log file</legend>
	  <label for="fileFilter">Log File</label><select id="fileFilter" name="fileFilter">
		'.$fileList.'
	  </select>
      <input type="submit">
	</fieldset>
  </form>
  '.$content.'
</body>
</html>';
	}

	private function filterExist($tag, $default = 'all') {
		
		$value = self::requestVal($tag);
		
		if($value === false) $value = $default;
		
		return $value;
	}
	
	private function isSelected($val, $select){
		
		if($select === '')      return true;
		if($select === '0')     return true;
		if($select === 'all')   return true;
		if($val    === $select) return true;
		
		return false;
	}
	
	private function mockList($mockSelected){

		$mockListHtml = '';
		$files        = glob(Mock::DIR.'*'.Mock::FILE_EXT);
		
		sort($files);
		
		foreach($files as $file) {
				
			$file     = basename($file);
			$file     = str_replace(Mock::FILE_EXT, '', $file);
			$selected = '';
			
			if($mockSelected == $file) $selected = ' selected="selected" selected ';
			
			$mockListHtml .= '<option '.$selected.' name="'.$file.'" id="'.$file.'" value="'.$file.'">'.$file.'</option>';
		}
		return $mockListHtml;
	}
	
	private function appList($appNameSelected){

		$appListHtml = '';
		$files       = glob(App::EXPLOIT_DIR.'*'.App::FILE_EXT);
		$files       = array_merge($files, glob(App::PUBLIC_DIR.'*'.App::FILE_EXT));
		
		sort($files);
		
		foreach($files as $file) {
				
			$file     = basename($file);
			$file     = str_replace(App::FILE_EXT, '', $file);
			$selected = '';
			
			if($appNameSelected == $file) $selected = ' selected="selected" selected ';
			
			$appListHtml .= '<option '.$selected.' name="'.$file.'" id="'.$file.'" value="'.$file.'">'.$file.'</option>';
		}
		return $appListHtml;
	}
	
	private function selectedInit($mock, $year, $month, $day, $hour, $appName, $userId) {

		$appNameSelected = $this->filterExist('appNameFilter');
		$mockSelected    = $this->filterExist('mockFilter');
		$yearSelected    = $this->filterExist('yearFilter', date('Y', time()));
		$monthSelected   = $this->filterExist('monthFilter', date('m', time()));
		
		if(strlen($monthSelected) === 1) $monthSelected = '0'.$monthSelected;
		
		$daySelected = $this->filterExist('dayFilter', date('d', time()));
		
		if(strlen($daySelected) === 1) $daySelected = '0'.$daySelected;
		
		$hourSelected = $this->filterExist('hourFilter', date('H', time()));
		
		if(strlen($hourSelected) === 1) $hourSelected = '0'.$hourSelected;
		
		$userIdSelected = $this->filterExist('userIdFilter');
		
		if($this->isSelected($mock, $mockSelected) === false)       return false;
		if($this->isSelected($year, $yearSelected) === false)       return false;
		if($this->isSelected($month, $monthSelected) === false)     return false;
		if($this->isSelected($day, $daySelected) === false)         return false;
		if($this->isSelected($hour, $hourSelected) === false)       return false;
		if($this->isSelected($appName, $appNameSelected) === false) return false;
		if($this->isSelected($userId, $userIdSelected) === false)   return false;
		
		return true;
	}
	
	private function fileListHtmlGet() {

		$fileListHtml = '';
		$files        = glob(Trace::DIR.'*'.Trace::FILE_EXT);
		
		sort($files);
				
		foreach($files as $file) {
			
			$file = basename($file);
			$file = str_replace(Trace::FILE_EXT, '', $file);
			$info = explode(Trace::FILE_SEPARATPOR, $file);
			$mock = '';
			
			if(count($info) > 3) {
		
				$mock    = $info[0];
				$year    = substr($info[1], 0, 4);
				$month   = substr($info[1], 4, 2);
				$day     = substr($info[1], 6, 2);
				$hour    = substr($info[1], 8, 2);
				$appName = $info[2];
				$userId  = $info[3];
			}
			else {
		
				$year    = substr($info[0], 0, 4);
				$month   = substr($info[0], 4, 2);
				$day     = substr($info[0], 6, 2);
				$hour    = substr($info[0], 8, 2);
				$appName = $info[1];
				$userId  = $info[2];
			}
			if($this->selectedInit($mock, $year, $month, $day, $hour, $appName, $userId) === false) continue;

			$fileListHtml .= '<option name="'.$file.'" id="'.$file.'" value="'.$file.'">'.$file.'</option>';
		}
		return $fileListHtml;
	}
	
	private function fileContentHtmlGet() {
		
		$fileBasename = self::requestVal('fileFilter');
		$contentHTML  = '';
		
		if($fileBasename === false) return '';
		
		$file    = Trace::DIR.$fileBasename.Trace::FILE_EXT;
		
		if(is_file($file) === false) return $file.'Not found';
		
		$content = file_get_contents($file);
		$content = trim($content);
		$content = explode(Trace::SEP, $content);
		rsort($content);
		
		foreach($content as $line) {
			
			$line         = trim($line);
			$line         = str_replace(Trace::SEP_REPLACE, Trace::SEP, $line);
			$line         = json_decode($line);
			$line         = json_encode($line, JSON_PRETTY_PRINT);
			$line         = htmlentities($line, ENT_HTML5);
			$contentHTML .= '<p><pre>'.$line.'</pre></p>';
		}
		return $contentHTML;
	}
}

$traceView = new TraceView();

echo $traceView->html;

?>