<?php

require_once '../lib/_require.php';

class TraceView {
	
	use TRequest;
	
	CONST APP_NAME             = 'traceView';
	CONST APP_CLASS            = 'traceView';
	CONST MAIN_TEMPLATE        = 'traceViewTemplate';
	CONST FILTER_SUFFIX        = 'Filter';
	CONST SELECTED_SUFFIX      = 'Selected';
	CONST LIST_SUFFIX          = 'List';
	CONST LIST_HTML_GET_SUFFIX = 'ListHtmlGet';
	CONST SELECTED_HTML        = ' selected="selected" selected ';
	CONST OPTION_ALL_HTML      = '<option id="all" name="all" value="all">all</option>';
	CONST OPTION_NONE_HTML     = '<option id="none" name="none" value="none">none</option>';
		
	private $html;
	private $appNameSelected;
	private $mockSelected;
	private $stateSelected;
	private $userIdSelected;
	private $yearSelected;
	private $monthSelected;
	private $daySelected;
	private $hourSelected;
	private $classSelected;
	private $instanceSelected;
	private $lineSelected;
	private $methodSelected;
	private $mockList;
	private $appList;
	private $stateList;
	private $classList;
	private $content;
	private $time;
	private $timeZone;
	private $filterList     = array('state', 'class', 'appName', 'mock', 'year', 'month', 'day', 'hour', 'state', 'userId', 'instance', 'line', 'method');
	private $filterDateList = array();
	private $listList       = array('mock', 'app', 'state', 'class');
		
	public function __construct() {
		
		date_default_timezone_set(Conf::TIMEZONE_DEFAULT);
	}
	
	public function htmlGet() {
		
		$this->filterDateList['year']  = 'Y';
		$this->filterDateList['month'] = 'm';
		$this->filterDateList['day']   = 'd';
		$this->filterDateList['hour']  = 'H';
				
		foreach($this->filterList as $filter) {
			
			$varName         = $filter.self::SELECTED_SUFFIX;
			$filterName      = $filter.self::FILTER_SUFFIX;
			
			if(isset($this->filterDateList[$filter]) === false) $this->$varName  = self::filterExist($filterName);
			else                                                $this->$varName  = self::filterExist($filterName, date($this->filterDateList[$filter], time()));
		}
		foreach($this->listList as $list){
		
			$varName        = $list.self::LIST_SUFFIX;
			$funcName       = $list.self::LIST_HTML_GET_SUFFIX;
			$this->$varName = $this->$funcName();
		}
		$this->time		= date('d/m/Y H:i:s', time());
		$this->timeZone	= Conf::TIMEZONE_DEFAULT;
		$this->html     = Template::htmlConfTemplateGet(self::MAIN_TEMPLATE);
		$this->content  = $this->fileContentHtmlGet();

		foreach($this as $k => $v){
			
			if(is_string($v) !== true) continue;
			
			$this->html = str_replace('{'.$k.'}', $v, $this->html);
		}
		return $this->html;
	}
	public static function selectedHtmlGet($var, $selected, $selectedHtml = '') {
		
		if($var === $selected) $selectedHtml = self::SELECTED_HTML;
		
		return $selectedHtml;
	}
	public static function optionHtmlGet($selected, $id, $value, $text) {
		
		return '<option '.$selected.' name="'.$id.'" id="'.$id.'" value="'.$value.'">'.$text.'</option>';
	}

	public static function filterExist($tag, $default = 'all') {
		
		$value = self::requestVal($tag);
		
		if($value === false) $value = $default;
		
		return $value;
	}
	
	public static function isSelected($val, $select){
		
		if($select === '')      return true;
		if($select === '0')     return true;
		if($select === 'all')   return true;
		if($val    === $select) return true;
		
		return false;
	}
	
	public static function listHtmlGet($list, $valueSelected, $all = true, $none = false) {

		$listHtml = '';
		
		if($all  === true) $listHtml .= self::OPTION_ALL_HTML;
		if($none === true) $listHtml .= self::OPTION_NONE_HTML;
		
		foreach($list as $value){
				
			$selected  = self::selectedHtmlGet($value, $valueSelected);
			$listHtml .= self::optionHtmlGet($selected, $value, $value, $value);
		}
		return $listHtml;
	}
	
	private function stateListHtmlGet() {
		
		return self::listHtmlGet(Trace::$stateList, $this->stateSelected, true);
	}
	
	private function classListHtmlGet() {
		
		return self::listHtmlGet(Fw::$classList, $this->classSelected, true);
	}
	
	private function mockListHtmlGet() {

		$files2 = array();
		$files  = glob(Mock::DIR.'*'.Mock::FILE_EXT);
		
		sort($files);
		
		foreach($files as $file) {
				
			$file     = basename($file);
			$files2[] = str_replace(Mock::FILE_EXT, '', $file);
		}
		return self::listHtmlGet($files2, $this->mockSelected, true, true);
	}
	
	private function appListHtmlGet(){

		$files2 = array();
		$files  = glob(App::EXPLOIT_DIR.'*'.App::FILE_EXT);
		$files  = array_merge($files, glob(App::PUBLIC_DIR.'*'.App::FILE_EXT));
		
		sort($files);
		
		foreach($files as $file) {
				
			$file     = basename($file);
			$files2[] = str_replace(App::FILE_EXT, '', $file);
		}
		return self::listHtmlGet($files2, $this->appNameSelected, true);
	}
	
	private function fileContentHtmlGet() {
		
		$contentA = array();
		$files    = glob(Trace::DIR.'*'.Trace::FILE_EXT);
		
		sort($files);
		
		foreach($files as $file) {
		
			$size      = filesize($file);
			$size      = $size / 1000000;
			$size      = round($size,3);
			$size      = (string) $size;
			$basenamme = basename($file);
			$content   = file_get_contents($file);
			$content   = trim($content);
			$content   = explode(Trace::SEP, $content);
			rsort($content);
			
			foreach($content as $l) {
				
				$l       = trim($l);
				$l       = str_replace(Trace::SEP_REPLACE, Trace::SEP, $l);
				$l       = json_decode($l);
				$state   = $l->errorInfoLevel;
				$userId  = $l->user->idCryptedT;
				$appName = $l->app->name;
				$year    = $l->time->Y;
				$month   = $l->time->m;
				$day     = $l->time->d;
				$hour    = $l->time->H;
				$mock    = 'none';
				
				if($l->mock->mock !== false) $mock = $l->mock->mock->mockState;
				
				$time     = $l->time->time;
				$class    = $l->class;
				$line     = $l->line;
				$method   = $l->method;
				$instance = $l->instance;
				$continue = false;
				
				foreach($this->filterList as $filter) {
						
					$varName = $filter.self::SELECTED_SUFFIX;
						
					if(self::isSelected(${$filter}, $this->$varName) === false) {
						$continue = true;
						break;
					}
				}
				if($continue === true) continue;
				
				$l                 = json_encode($l, JSON_PRETTY_PRINT);
				$l                 = htmlentities($l, ENT_HTML5);
				$title             = $basenamme.' '.$size.' Mo';
				$contentA[$time][] = '<p>'.$title.'<pre class="'.$state.'">'.$l.'</pre></p>';
			}
		}
		sort($contentA);

		$contentHTML = '';
		
		foreach($contentA as $time => $events){
			
			$contentHTML .= implode("\n", $events);
		}
		return $contentHTML;
	}
}

$_REQUEST['appName'] = TraceView::APP_NAME;
$app                 = App::init(TraceView::APP_CLASS);

if($app === false) return false;

echo $app->htmlGet();

?>
