<?php

class Attribut {

    private $name;
    private $type;
    private $testFunc;
    private $testResult;
    private $defaultValue;
    private $emptyValue;
    private $errorValue;
    private $value;
    private $defaultState = false;
    private $emptyState   = false;
    private $errorState   = false;

    public function __construct($conf) {

        $this->type = $conf->returnType;
        $this->name = $conf->return;

        if(isset($conf->returnDefaultValue) === true) $this->defaultValue = $conf->returnDefaultValue;
        if(isset($conf->returnEmptyValue)   === true) $this->emptyValue   = $conf->returnEmptyValue;
        if(isset($conf->returnErrorValue)   === true) $this->errorValue   = $conf->returnErrorValue;

        $this->testFunc = Framework::CODE_FUNC_TEST_PREFIX.$this->type;
    }

    public static function listSetFromConf($conf) {

        $attributList    = array();
        $attributListTmp = FrameWork::confToParamList($conf);

        foreach($attributListTmp as $k => $type) {

            $conf             = stdclass();
            $conf->return     = $k;
            $conf->returnType = $type;

            $attributList[$k] = new Attribut($conf);
        }
        return $attributList;
    }
}

class Node {

    private $name;
    private $attributList = array();


    public function __construct($name, $conf) {

        $this->name         = $name;
        $this->attributList = Attribut::listSetFromConf($conf);
    }
}

class MicroServiceReturn extends Attribut {

    public function __construct($conf) {

        parent::__construct($conf);
    }
}

class MicroService {

    private $name;
    private $return;
    private $attributList = array();

    public function __construct($name, $conf) {

        $this->name         = $name;
        $this->return       = new MicroServiceReturn($conf);
        $this->attributList = Attribut::listSetFromConf($conf);
    }
}

class RelationShip {

    private $name;
    private $return;
    private $attributList = array();

    public function __construct($name, $conf) {

        $this->name         = $name;
        $this->return       = new MicroServiceReturn($conf);
        $this->attributList = Attribut::listSetFromConf($conf);
    }
}

trait TraitCodePhp {

    public function nodeCodePhp($className, $varList){

        return $code;
    }

    public function microServiceCodePhp($className, $varList){

        return $code;
    }
}

class FrameWork {

    use TraitCodePhp;

    CONST CONF_FILE                 = 'conf/confManager.json';
    CONST CODE_LANGUAGE             = 'Php';
    CONST CODE_PREFIX               = 'Code';
    CONST CODE_FUNC_TEST_PREFIX     = 'traitTest';

    public static $attributList     = array();
    public static $nodeList         = array();
    public static $microServiceList = array();
    public static $relationShipList = array();

    public function __construct($confFile = self::CONF_FILE) {

        $confContent = file_get_contents($confFile);
        $confObj     = json_decode($confContent);

        foreach($confObj->microServiceDefaultList as $microserviceName => $microserviceConf){

            self::attributAdd($microserviceConf);
            self::nodeAdd($microserviceName, $microserviceConf);
            self::microServiceAdd($microserviceName, $microserviceConf);
        }
    }

    public static function confToParamList($conf) {

        $paramList = array();

        foreach($conf->postNameList as $k => $v) {

            $paramList[$v] = $conf->postTypeList[$k];
        }
        return $paramList;
    }

    public static function attributAdd($conf) {

        self::$attributList[$conf->return] = new Attribut($conf);

        return true;
    }

    public static function nodeAdd($name, $conf) {

        self::$nodeList[$name] = new Node($name, $conf);

        return true;
    }

    public static function microServiceAdd($name, $conf) {

        self::$microServiceList[$name] = new MicroService($name, $conf);

        return true;
    }

    public static function relationShipAdd($name, $conf) {

        self::$microServiceList[$name] = new MicroService($name, $conf);

        return true;
    }
}

"microServiceDefaultList": {
"explore": {
"path": ["node", "uid"],
"returnEmptyValue": "",
"returnErrorValue": false,
"returnDefaultValue": false,
"relationship": "EXLPORE",
"postNameList": [],
"postTypeList": [],
"return": "nodeList",
"returnType": "NodeList",
"end": "NodeList"






?>