<?php

class Node {

    use TraitPath;

    CONST SEC_TYPE = 'N';

    private $name;
    private $extend;

    public function __construct($conf) {

        self::t(__CLASS__.' '.__FUNCTION__.' START', false);

        $this->name         = $conf->return;
        $this->extend       = $conf->returnType;
        $this->attributList = Attribut::listSetFromConf($conf);

        $this->pathSet();

        self::t($this, false);
    }

    public static function confToLabelConf($nodeVarName, $nodeConf) {

        $conf               = new stdClass();
        $conf->postNameList = array();
        $conf->postTypeList = array();

        if(isset($nodeConf->onCreateSetList) === true) {

            foreach($nodeConf->onCreateSetList as $attributName => $attributDefaultValue) {

                $key                      = count($conf->postNameList);
                $conf->postNameList[$key] = $attributName;
                $type                     = gettype($attributDefaultValue);

                if($type === 'object') {

                    $type = get_class($attributDefaultValue);
                }
                $conf->postTypeList[$key] = $type;
            }
        }
        $conf->return      = $nodeVarName;
        $conf->returnType  = $nodeConf->label;

        return $conf;
    }

    public static function add($nodeVarName, $nodeConf) {

        if(isset($nodeConf->label) === false) {

            return true;
        }
        $nodeConf->return     = $nodeVarName;
        $nodeConf->returnType = $nodeConf->label;

        $labelConf = Node::confToLabelConf($nodeVarName, $nodeConf);

        Label::add($labelConf);

        $return = self::pathUniqAdd($nodeConf->return, $nodeConf);

        if($return == false) {

            return false;
        }
        return true;
    }
}

?>