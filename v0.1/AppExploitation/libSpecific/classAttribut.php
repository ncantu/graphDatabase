<?php

class Attribut extends Index {

    use TraitTrace;
    use TraitPath;

    CONST SEC_TYPE = 'A';

    private $type;
    private $testFunc;
    private $testResult;
    private $defaultValue;
    private $emptyValue;
    private $errorValue;
    private $value;
    private $setOnMatch   = false;
    private $defaultState = false;
    private $emptyState   = false;
    private $errorState   = false;

    public function __construct($conf) {

        self::t(__CLASS__.' '.__FUNCTION__.' START', false);

        parent::__construct($conf);

        $this->type = $conf->returnType;
        $testType   = ucfirst(strtolower($this->type));

        if(isset($conf->returnDefaultValue) === true) $this->defaultValue = $conf->returnDefaultValue;
        if(isset($conf->returnEmptyValue)   === true) $this->emptyValue   = $conf->returnEmptyValue;
        if(isset($conf->returnErrorValue)   === true) $this->errorValue   = $conf->returnErrorValue;

        if($testType === false) $testType = FrameWork::TYPE_MIXTED;

        $this->setOnMatch = false;

        if(isset($conf->setOnMatch) === true ) $this->setOnMatch = true;

        $this->testFunc = FrameWork::CODE_FUNC_TEST_PREFIX.$testType;

        $this->pathSet();

        self::t($this, false);
    }

    public static function listSetFromConf($conf,$attributList = array()) {

        if(isset($conf->setOnMatch) === false) {

            $conf->setOnMatch = false;
        }
        if(isset($conf->postNameList) === true) {

            foreach($conf->postNameList as $k => $v) {

                $attributConf             = new stdClass();
                $attributConf->return     = $v;

                if(isset($conf->postTypeList) === false) {

                   self::t(__LINE__.' '.__FILE__.' '.__CLASS__.' '.__FUNCTION__.' '.__METHOD__.' '.postTypeList.var_export($conf, true));
                }
                $attributConf->returnType = $conf->postTypeList[$k];
                $attributConf->setOnMatch = $conf->setOnMatch;
                $attributList[$k]         = new Attribut($attributConf);
            }
        }
        if (isset($conf->onCreateSetList) === true){

            foreach($conf->onCreateSetList as $k => $default) {

                $attributConf         = new stdClass();
                $attributConf->return = $k;
                $type                 = gettype($default);

                if($type === 'object') {

                    $type = get_class($default);
                }
                $attributConf->returnType       = $type;
                $attributConf->setOnMatch       = $conf->setOnMatch;
                $attributList[$k]               = new Attribut($attributConf);
                $attributList[$k]->defaultValue = $default;
            }
        }
        return $attributList;
    }

    public static function add($conf) {

        if(isset($conf->return) === false){

            self::t(__LINE__.' '.__FILE__.' '.__CLASS__.' '.__FUNCTION__.' '.__METHOD__.' '.postTypeList.var_export($conf, true));
        }
        if(isset(FrameWork::$attributList[$conf->return]) === true) {

            return false;
        }
        FrameWork::$attributList[$conf->return] = new Attribut($conf);

        return true;
    }
}

?>