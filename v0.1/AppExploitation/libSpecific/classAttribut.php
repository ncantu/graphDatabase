<?php

class Attribut extends Index {

    use TraitPath;

    CONST SEC_TYPE = 'A';

    private $type;
    private $testFunc;
    private $testResult;
    private $defaultValue;
    private $emptyValue;
    private $errorValue;
    private $value;
    private $setOnMatch   = false;
    private $defaultState = false;
    private $emptyState   = false;
    private $errorState   = false;

    public function __construct($conf) {

        self::t(__CLASS__.' '.__FUNCTION__.' START', false);

        parent::__construct($conf);

        $this->type = $conf->returnType;
        $testType   = ucfirst(strtolower($this->type));

        if(isset($conf->returnDefaultValue) === true) $this->defaultValue = $conf->returnDefaultValue;
        if(isset($conf->returnEmptyValue)   === true) $this->emptyValue   = $conf->returnEmptyValue;
        if(isset($conf->returnErrorValue)   === true) $this->errorValue   = $conf->returnErrorValue;

        if($testType === false) {

            $testType = ConfigManager::TYPE_MIXTED;
        }
        $this->setOnMatch = false;

        if(isset($conf->setOnMatch) === true ) $this->setOnMatch = true;

        $this->testFunc = ConfigManager::CODE_FUNC_TEST_PREFIX.$testType;

        $this->pathSet();

        self::t($this, false);
    }

    public static function add($conf) {

        if(isset($conf->return) === false){

            self::t(__LINE__.' '.__FILE__.' '.__CLASS__.' '.__FUNCTION__.' '.__METHOD__.' '.postTypeList.var_export($conf, true));
        }
        self::pathUniqAdd($conf->return, $conf);

        return true;
    }
}

?>