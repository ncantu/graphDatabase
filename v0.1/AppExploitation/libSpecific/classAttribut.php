<?php


class Attribut extends Index {

    use TraitPath;

    CONST SEC_TYPE = 'A';

    private $type;
    private $testFunc;
    private $testResult;
    private $defaultValue;
    private $emptyValue;
    private $errorValue;
    private $value;
    private $setOnMatch   = false;
    private $defaultState = false;
    private $emptyState   = false;
    private $errorState   = false;

    public function __construct($conf) {

        parent::__construct($conf);

        $this->type = $conf->returnType;
        $testType   = ucfirst(strtolower($this->type));

        if(isset($conf->returnDefaultValue) === true) $this->defaultValue = $conf->returnDefaultValue;
        if(isset($conf->returnEmptyValue)   === true) $this->emptyValue   = $conf->returnEmptyValue;
        if(isset($conf->returnErrorValue)   === true) $this->errorValue   = $conf->returnErrorValue;

        if($testType === false)                $testType         = FrameWork::TYPE_MIXTED;
        if(isset($conf->setOnMatch) === true ) $this->setOnMatch = $conf->setOnMatch;

        $this->testFunc = FrameWork::CODE_FUNC_TEST_PREFIX.$testType;

        $this->pathSet();
    }

    public static function listSetFromConf($conf) {

        $attributList    = array();
        $attributListTmp = FrameWork::confToParamList($conf);

        foreach($attributListTmp as $k => $type) {

            $conf             = stdclass();
            $conf->return     = $k;
            $conf->returnType = $type;

            if(isset($conf->setOnMatch) === true ) $conf->setOnMatch = $conf->setOnMatch;

            $attributList[$k] = new Attribut($conf);
        }
        return $attributList;
    }
}

?>