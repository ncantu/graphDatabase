<?php

class FrameWork {

    use TraitCodePhp;
    use TraitCodeCypher;

    CONST CODE_PREFIX                 = 'Code';
    CONST CODE_FUNC_TEST_PREFIX       = 'traitTest';
    CONST TYPE_MIXTED                 = 'Mixted';

    public static $codeLanguage       = self::CODE_LANGUAGE_PHP;
    public static $attributList       = array();
    public static $labelList          = array();
    public static $microServiceList   = array();
    public static $relationShipList   = array();
    public static $indexList          = array();
    public static $nodeList           = array();

    public function __construct($confFile = Install::CONF_FILE) {

        $confContent = file_get_contents($confFile);
        $confObj     = json_decode($confContent);

        foreach($confObj->nodeList as $nodeVarName => $nodeConf) {

            $conf = self::nodeConfToLabelConf($nodeVarName, $nodeConf);

            self::nodeAdd($nodeConf, $conf);
        }
        foreach($confObj->microServiceDefaultList as $microserviceName => $microserviceConf) {

            self::attributAdd($microserviceConf);
            self::labelAdd($microserviceConf);
            self::microServiceAdd($microserviceName, $microserviceConf);
            self::relationShipAdd($microserviceConf);
        }
        foreach($confObj->indexList as $index) {

            self::indexAdd($index);
        }
    }

    public static function confToParamList($conf) {

        $paramList = array();

        foreach($conf->postNameList as $k => $v) {

            $paramList[$v] = $conf->postTypeList[$k];
        }
        return $paramList;
    }

    private static function nodeConfToLabelConf($nodeVarName, $nodeConf) {

        $conf               = stdclass();
        $conf->postNameList = array();
        $conf->postTypeList = array();

        if(isset($conf->onCreateSetList) === true) {

            foreach($conf->onCreateSetList as $attributName => $attributDefaultValue) {

                $key                      = count($conf->postNameList);
                $conf->postNameList[$key] = $attributName;
                $type                     = gettype($attributDefaultValue);

                if($type === 'object') {

                    $type = get_class($attributDefaultValue);
                }
                $conf->postTypeList[$key] = $type;
            }
        }
        $conf->return      = $nodeVarName;
        $conf->returnType  = $nodeConf->label;

        return $conf;
    }

    public static function attributAdd($conf) {

        if(isset(self::$attributList[$conf->return]) === true) {

            return false;
        }
        self::$attributList[$conf->return] = new Attribut($conf);

        return true;
    }

    public static function labelAdd($conf) {

        if(isset(self::$labelList[$conf->return]) === true) {

            return false;
        }
        self::$labelList[$conf->return] = new Label($conf);

        return true;
    }

    public static function microServiceAdd($name, $conf) {

        if(isset(self::$microServiceList[$name]) === true) {

            return false;
        }
        self::$microServiceList[$name] = new MicroService($name, $conf);

        return true;
    }

    public static function relationShipAdd($conf) {

        if(isset(self::$relationShipList[$conf->relationship]) === true) {

            return false;
        }
        self::$relationShipList[$conf->relationship] = new RelationShip($conf);

        return true;
    }

    public static function indexAdd($index) {

        if(isset(self::$indexList[$index]) === true) {

            return false;
        }
        self::$indexList[$index] = new Index($index);
        $conf                    = stdclass();
        $conf->return            = $index;
        $conf->returnType        = false;

        self::attributAdd($conf);

        return true;
    }

    public static function nodeAdd($conf, $labelConf) {

        self::labelAdd($labelConf);

        if(isset(self::$nodeList[$conf->return]) === true) {

            return false;
        }
        self::$nodeList[$conf->return] = new Node($conf);

        return true;
    }
}

?>